# import the necessary packages
import numpy as np
import cv2 as cv
 
# load the games image
img = cv.imread("vitrage.jpeg")
#img = cv.GaussianBlur(image, (11,11), 0)
dst = img
cv.pyrMeanShiftFiltering(img, 30, 30, dst)

gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
ret, thresh = cv.threshold(gray,0,255,cv.THRESH_BINARY_INV+cv.THRESH_OTSU)

# noise removal
kernel = np.ones((3,3),np.uint8)
opening = cv.morphologyEx(thresh,cv.MORPH_OPEN,kernel, iterations = 2)

 # sure background area
sure_bg = cv.dilate(opening,kernel,iterations=3)

# Finding sure foreground area
dist_transform = cv.distanceTransform(opening,cv.DIST_L2,5)
ret, sure_fg = cv.threshold(dist_transform,0.7*dist_transform.max(),255,0)

# Finding unknown region
sure_fg = np.uint8(sure_fg)
unknown = cv.subtract(sure_bg,sure_fg)

ret, markers = cv.connectedComponents(sure_fg)

# Add one to all labels so that sure background is not 0, but 1
markers = markers+1
# Now, mark the region of unknown with zero
markers[unknown==255] = 0

markers = cv.watershed(img,markers)
img[markers == -1] = [255,0,0]

# draw a green bounding box surrounding the red game
#cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)
cv.imshow("Image", dst)
cv.waitKey(0)




# find the red color game in the image
#upper = np.array([65, 65, 255])
#lower = np.array([0, 0, 200])
#mask = cv2.inRange(image, lower, upper)
